
// МОДУЛЬ устарів - треба викристовувати 1С_v2.txt
//  МОДУЛЬ внешнего соединения


Перем ШАПКА_ХМЛ;
Перем ХВОСТ_ХМЛ;

Перем ВРЕМЯ_ЖИЗНИ_СЕССИИ;

// Авторизація користувача
// 		Логін - код елемента довідника
//		Пароль
//		ІПАдреса - привязка ключа до ІП
//		СтарийКлюч - якщо користувач був авторизований і 
Функция LogIn(Логін, Пароль, ІПАдреса, СтарийКлюч) Экспорт
	
	Попытка
		
		Если НЕ (ПустаяСтрока(Логін) = Истина ИЛИ ПустаяСтрока(Пароль) = Истина) Тогда
			
			ВебПользовательСсилка = Справочники.ВебПользователи.НайтиПоКоду(Логін); 
			
			Если Не ВебПользовательСсилка.Пустая() Тогда
				
				ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
				
				Если ВебПользователь.Пароль = Пароль Тогда
					
					КлючУникальности = Новый УникальныйИдентификатор;
					
					ЗарегестрироватьСессиюПользователя(КлючУникальности, ВебПользовательСсилка, ІПАдреса);
					
					Возврат ХМЛОтвет(200, "OK", КлючУникальности);
				Иначе
					Возврат ХМЛОтвет(500, "Невірний логін або пароль");
				КонецЕсли;
				
			Иначе
				Возврат ХМЛОтвет(500, "Невірний логін або пароль");
			КонецЕсли;
		Иначе
			Возврат ХМЛОтвет(500, "Невірний логін або пароль");
		КонецЕсли;
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Вихід
// 		
Функция LogOff(Ключ, ІПАдреса) Экспорт
	
	Попытка
		ЗакритиСесиюПользователя(Ключ, ІПАдреса);
		
		Возврат ХМЛОтвет(200, "OK");
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Реєстрація нового клієнта
//		ІПАдреса - привязка до ІП
// 		Назва - назва клієнта
// 		Емайл - Емайл клієнта
// 		Телефон - Телефон клієнта
// 		Пароль - Пароль клієнта
Функция Registration(ІПАдреса, Назва, Емайл, Телефон, Пароль) Экспорт
	
	Попытка
		
		Если ПустаяСтрока(Назва) ИЛИ ПустаяСтрока(Емайл) ИЛИ ПустаяСтрока(Телефон) ИЛИ ПустаяСтрока(Пароль) Тогда
			Возврат ХМЛОтвет(301, "Потрібно заповнити всі поля");
		Иначе
			
			//Створюєм нового контрагента
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование = Назва;
			Контрагент.НаименованиеПолное = Назва;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			Контрагент.ДополнительнаяИнформация = "Емайл: " + Емайл + Символы.ПС + "Телефон: " + Телефон;
			Контрагент.Записать();
			
			//Створюєм нового користувача веб
			ВебПользователь = Справочники.ВебПользователи.СоздатьЭлемент();
			ВебПользователь.Наименование = Назва;
			ВебПользователь.Пароль = Пароль;
			ВебПользователь.Контрагент = Контрагент.Ссылка;
			ВебПользователь.Записать();
			
			ВебПользовательСсилка = ВебПользователь.Ссылка;
			
			//Авторизуєм користувача і перенаправляєм на сторінку редагування особистих даних
			КлючУникальности = Новый УникальныйИдентификатор;
			ЗарегестрироватьСессиюПользователя(КлючУникальности, ВебПользовательСсилка, ІПАдреса);
			
			Возврат ХМЛОтвет(200, "OK", КлючУникальности, ВебПользовательСсилка);
		КонецЕсли;
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Функція зчитує дані акаунта
// 		Ключ
Функция ReadAcauntInfo(Ключ, ІПАдреса) Экспорт
	
	Попытка
			
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		Если ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(404, "Потрібно пройти авторизацію");
		КонецЕсли;
		
		ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
			
		КонтрагентСсилка = ВебПользователь.Контрагент;
		
		Если КонтрагентСсилка = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(500, "Помилка. Для акаунта не вказаний контрагент");
		КонецЕсли;
		
		КонтрагентОбъект = КонтрагентСсилка.ПолучитьОбъект();
		КонтрагентОбъект.Прочитать();
		
		ХМЛДани = "
		|<contragent>
		|	<login>" + ВебПользователь.Код + "</login>
		|	<name><![CDATA[" + КонтрагентОбъект.Наименование + "]]></name>
		|	<contacty><![CDATA[" + КонтрагентОбъект.ДополнительнаяИнформация + "]]></contacty>
		|</contragent>";
		
		Возврат ХМЛОтвет(200, "OK", Ключ, ВебПользовательСсилка, ХМЛДани);
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Функція обновляє дані користувача
// 		Ключ
// 		ІПАдреса
// 		Назва
// 		ЕмайлТаТелефон
// 		Пароль
Функция UpdateAcaunt(Ключ, ІПАдреса, Назва, ЕмайлТаТелефон, СтарийПароль, Пароль) Экспорт
	
	Попытка
	
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		Если ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(404, "Потрібно пройти авторизацію");
		КонецЕсли;
		
		Если ПустаяСтрока(Назва) ИЛИ ПустаяСтрока(ЕмайлТаТелефон) Тогда
			Возврат ХМЛОтвет(301, "Потрібно заповнити всі поля");
		КонецЕсли;
		
		ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
		ВебПользователь.Прочитать();
		
		КонтрагентСсилка = ВебПользователь.Контрагент;
		
		Если КонтрагентСсилка = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(500, "Помилка: Для акаунта не вказаний контрагент");
		КонецЕсли;
		
		КонтрагентОбъект = КонтрагентСсилка.ПолучитьОбъект();
		КонтрагентОбъект.Прочитать();
		
		//Обновлення даних контрагента
		КонтрагентОбъект.Наименование = Назва;
		КонтрагентОбъект.ДополнительнаяИнформация = ЕмайлТаТелефон;
		КонтрагентОбъект.Записать();
		
		//Обновлення пароля
		Если ПустаяСтрока(СтарийПароль) = Ложь Тогда
			Если ВебПользователь.Пароль = СтарийПароль Тогда
				Если ПустаяСтрока(Пароль) = Ложь Тогда
					ВебПользователь.Пароль = Пароль;
					ВебПользователь.Записать();
				Иначе
					Возврат ХМЛОтвет(500, "Помилка: Пароль не може бути пустий");
				КонецЕсли;
			Иначе
				Возврат ХМЛОтвет(500, "Помилка: Cтарий пароль не підходить");
			КонецЕсли;
		КонецЕсли;
		
		Возврат ХМЛОтвет(200, "OK. Зміни записано", Ключ, ВебПользовательСсилка);
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции


Функция ЗаписатьДаниеВЛог(Дані)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.ДобавитьСтроку(Дані);
	ТекстовыйДокумент.Записать("D:\1C\1C83\log.txt", "windows-1251", Символы.ПС);
	
КонецФункции

Функция Test(Логін, Пароль) Экспорт
	
	
	
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|<root>
	|	<login>" + Логін + "</login>
	|	<pass>" + Пароль + "</pass>
	|</root>";
	
КонецФункции

Функция Update(Ключ, ІПАдреса) Экспорт
	
	Попытка
		
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		ХМЛДани = "
		|<a>TEST</a>";
		
		Возврат ХМЛОтвет(200, "OK", Ключ, ВебПользовательСсилка, ХМЛДани);
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Функція формує ХМЛ дані для відправки
//		КодСостояния - довільне число яке вказує на стан виконання (наприклад 200 це ОК, 500 - помилка і т.д)
// 		ОписаниеСостояния - коментар стану
//		Ключ - унікальний ключ сесії якщо є
// 		ТелоХМЛ - додаткові дані які потрібно вставити в хмл
Функция ХМЛОтвет(КодСостояния, ОписаниеСостояния = "", Ключ = "", ВебПользовательСсилка = Null, ТелоХМЛ = "")
	
	ХМЛДани = ШАПКА_ХМЛ + "
	|<state>
	|	<code>" + КодСостояния + "</code>
	|	<guid>" + Ключ + "</guid>
	|	<info><![CDATA[" + ОписаниеСостояния + "]]></info>";
	
	Если НЕ (ВебПользовательСсилка = Null ИЛИ ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка()) Тогда
		
		ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
		
		ХМЛДани = ХМЛДани + "
		|	<user>
		|		<code>" + ВебПользователь.Код + "</code>
		|		<name>" + ВебПользователь.Наименование + "</name>
		|	</user>";
		
	КонецЕсли;
	
	ХМЛДани = ХМЛДани + "
    |</state>";
	
	Возврат ХМЛДани + ТелоХМЛ + ХВОСТ_ХМЛ;
	
КонецФункции

// Запис сессії користувача
//	  Ключ - унікальний ключ сесії
//	  ВебПользователь - ссилка на елемент довідника
//	  ІПАдреса - привязка ключа до ІП
Функция ЗарегестрироватьСессиюПользователя(Ключ, ВебПользователь, ІПАдреса)
	
	НовыйНаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НовыйНаборЗаписей.Отбор.Пользователь.Установить(ВебПользователь, Истина);
	
	НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
	НоваяЗаписьНабора.Ключ = Ключ;
	НоваяЗаписьНабора.Пользователь = ВебПользователь;
	НоваяЗаписьНабора.ПоследняяАктивность = ТекущаяДата();
	НоваяЗаписьНабора.ІПАдресаКлюча = ІПАдреса;
	НовыйНаборЗаписей.Записать();
	
КонецФункции

// Повертає ссилку на користувача по ключу. 
// Важливий момент це ІР користувача. Наприклад користувач авторизувався на сайті, отримав ключ сесії
// і всі наступні дії відбуваються з використанням даного ключа. Для додаткового захисту відбувається 
// перевірка ІР адреси, щоб не було перехоплення ключа.
//		Ключ - унікальний ключ сесії
//		ІПАдреса - привязка ключа до ІП		
Функция ПолучитьПользователяПоКлючу(Ключ, ІПАдреса)
	
	//Службова перевірка всіх сесій і видалення устарівших
	ПроверитьСостояниеСесий();
	
	//Пошук користувача	
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |	ВебСесииПользователей.Пользователь
        |ИЗ
        |	РегистрСведений.ВебСесииПользователей КАК ВебСесииПользователей
        |ГДЕ
        |	ВебСесииПользователей.Ключ = &Ключ
        |	И ВебСесииПользователей.ІПАдресаКлюча = &ІПАдресаКлюча";
 
    Запрос.УстановитьПараметр("Ключ", Ключ);
    Запрос.УстановитьПараметр("ІПАдресаКлюча", ІПАдреса);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПользователь = РезультатЗапроса.Выбрать();
 
	Если ВыборкаПользователь.Следующий() Тогда
		
		//Обновлення останньої активності сесії користувача
		ОбновитьСесиюПользователя(Ключ, ІПАдреса);
		
        Возврат ВыборкаПользователь.Пользователь;
	Иначе
		Возврат Справочники.ВебПользователи.ПустаяСсылка();
    КонецЕсли;
	
КонецФункции

// Функція перевіря актуальність всіх сесій
// Сесії в яких остання активність менша часу життя сесії - видаляються
Функция ПроверитьСостояниеСесий()
	
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); 
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		
		Если (ТекущаяДата() - ВРЕМЯ_ЖИЗНИ_СЕССИИ) > Запись.ПоследняяАктивность Тогда
			НаборЗаписей.Удалить(Запись); 
		КонецЕсли;
		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецФункции	

// Функція обновляє останню активність сесії
// 		Ключ - ключ користувача
// 		ІПАдреса - привязка ключа до ІП	
Функция ОбновитьСесиюПользователя(Ключ, ІПАдреса)
	
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НаборЗаписей.Отбор.ІПАдресаКлюча.Установить(ІПАдреса, Истина);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		Запись.ПоследняяАктивность = ТекущаяДата();		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецФункции

// Функція видаляє сесію користувача
//      Ключ - ключ користувача
// 		ІПАдреса - привязка ключа до ІП	
Функция ЗакритиСесиюПользователя(Ключ, ІПАдреса)
	
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НаборЗаписей.Отбор.ІПАдресаКлюча.Установить(ІПАдреса, Истина);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		НаборЗаписей.Удалить(Запись); 		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецФункции


//-------------------------------------------

ШАПКА_ХМЛ = "<?xml version=""1.0"" encoding=""windows-1251""?><root>";
ХВОСТ_ХМЛ = "</root>";

ВРЕМЯ_ЖИЗНИ_СЕССИИ = 3600;