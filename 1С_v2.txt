
//----------------------------------------------------------------------
//1. Потрібно створити довідник ВебПользователи
//	 Реквізити:
//		Пароль - Строка
//		Контрагент - СправочникСсылка.Контрагенты
//
//2. Потрібно створити регістр відомостей ВебСесииПользователей
//	 Виміри:
//		Ключ - Строка(36)
//		Пользователь - СправочникСсылка.ВебПользователи
//		ПоследняяАктивность - Дата і час
//		ІПАдресаКлюча - Строка (16) [255.255.255.255]
//		
//----------------------------------------------------------------------

Перем ВРЕМЯ_ЖИЗНИ_СЕССИИ;

////////////////////////////////////////////////////////////////////////////////
// ВХОД, ВИХОД, РЕГИСТРАЦИЯ, ОБНОВЛЕНИЕ АКАУНТА
//

// Авторизація користувача
// 		Логін - код елемента довідника
//		Пароль
//		ІПАдреса - привязка ключа до ІП
//		СтарийКлюч - якщо користувач був авторизований 
Функция LogIn(Логін, Пароль, ІПАдреса, СтарийКлюч) Экспорт
	
	Попытка
		
		Если НЕ (ПустаяСтрока(Логін) = Истина ИЛИ ПустаяСтрока(Пароль) = Истина) Тогда
			
			ВебПользовательСсилка = Справочники.ВебПользователи.НайтиПоКоду(Логін); 
			
			Если Не ВебПользовательСсилка.Пустая() Тогда
				
				ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
				
				Если ВебПользователь.Пароль = Пароль Тогда
					
					КлючУникальности = Новый УникальныйИдентификатор;
					
					ЗарегестрироватьСессиюПользователя(КлючУникальности, ВебПользовательСсилка, ІПАдреса);
					
					//Якщо додатково переданий старий ключ, значить потрібно закрити сесію повязану із цим ключем
					Если ПустаяСтрока(СтарийКлюч) = Ложь Тогда
						ЗакритиСесиюПользователя(СтарийКлюч, ІПАдреса);
					КонецЕсли;
					
					Возврат ХМЛОтвет(200, "OK", КлючУникальности);
				Иначе
					Возврат ХМЛОтвет(500, "Невірний логін або пароль");
				КонецЕсли;
				
			Иначе
				Возврат ХМЛОтвет(500, "Невірний логін або пароль");
			КонецЕсли;
		Иначе
			Возврат ХМЛОтвет(500, "Потрібно заповнити поля");
		КонецЕсли;
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Вихід
// 		Ключ - унікальний ключ сесії, отриманий при реєстрації
//      ІПАдреса - привязка ключа до IP
Функция LogOff(Ключ, ІПАдреса) Экспорт
	
	Попытка
		ЗакритиСесиюПользователя(Ключ, ІПАдреса);
		
		Возврат ХМЛОтвет(200, "OK");
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Функція зчитує дані акаунта
// 		Ключ - унікальний ключ сесії, отриманий при реєстрації
//      ІПАдреса - привязка ключа до IP
Функция ReadAccountInfo(Ключ, ІПАдреса) Экспорт
	
	Попытка
		
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		Если ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(400, "Потрібно пройти авторизацію");
		КонецЕсли;
		
		ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
		
		КонтрагентСсилка = ВебПользователь.Контрагент;
		
		Если КонтрагентСсилка = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(500, "Помилка. Для акаунта не вказаний контрагент", Ключ, ВебПользовательСсилка);
		КонецЕсли;
		
		КонтрагентОбъект = КонтрагентСсилка.ПолучитьОбъект();
		КонтрагентОбъект.Прочитать();
		
		ХМЛДани = "
		|<contragent>
		|	<login>" + ВебПользователь.Код + "</login>
		|	<name><![CDATA[" + КонтрагентОбъект.Наименование + "]]></name>
		|	<contacty><![CDATA[" + КонтрагентОбъект.Комментарий + "]]></contacty>
		|</contragent>";
		
		Возврат ХМЛОтвет(200, "OK", Ключ, ВебПользовательСсилка, ХМЛДани);
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// Функція обновляє дані користувача
// 		Ключ
// 		ІПАдреса
// 		Назва - назва пользователя. Назва контрагента не змінюється
// 		ЕмайлТаТелефон
// 		Пароль
Функция UpdateAccount(Ключ, ІПАдреса, Назва, ЕмайлТаТелефон, СтарийПароль, Пароль) Экспорт
	
	Попытка
		
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		Если ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(400, "Потрібно пройти авторизацію");
		КонецЕсли;
		
		Если ПустаяСтрока(Назва) ИЛИ ПустаяСтрока(ЕмайлТаТелефон) Тогда
			Возврат ХМЛОтвет(300, "Потрібно заповнити всі поля", Ключ, ВебПользовательСсилка);
		КонецЕсли;
		
		ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
		ВебПользователь.Прочитать();
		//Обновлення даних акаунта
		ВебПользователь.Наименование = Назва;
		ВебПользователь.Записать();
		
		КонтрагентСсилка = ВебПользователь.Контрагент;
		
		Если КонтрагентСсилка = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(500, "Помилка: Для акаунта не вказаний контрагент", Ключ, ВебПользовательСсилка);
		КонецЕсли;
		
		КонтрагентОбъект = КонтрагентСсилка.ПолучитьОбъект();
		КонтрагентОбъект.Прочитать();
		//Обновлення даних контрагента
		КонтрагентОбъект.Комментарий = ЕмайлТаТелефон;
		КонтрагентОбъект.Записать();
		
		//Обновлення пароля
		Если ПустаяСтрока(СтарийПароль) = Ложь Тогда
			Если ВебПользователь.Пароль = СтарийПароль Тогда
				Если ПустаяСтрока(Пароль) = Ложь Тогда
					ВебПользователь.Пароль = Пароль;
					ВебПользователь.Записать();
				Иначе
					Возврат ХМЛОтвет(500, "Помилка: Пароль не може бути пустий", Ключ, ВебПользовательСсилка);
				КонецЕсли;
			Иначе
				Возврат ХМЛОтвет(500, "Помилка: Cтарий пароль не підходить", Ключ, ВебПользовательСсилка);
			КонецЕсли;
		КонецЕсли;
		
		Возврат ХМЛОтвет(200, "OK. Зміни записано", Ключ, ВебПользовательСсилка);
		
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// АСИНХРОННІ ФУНКЦІЇ
//

// ХМЛ список регіонів (асинхронна підгрузка)
//
Функция GetRegions_Async(Ключ, ІПАдреса) Экспорт
	
	Попытка
		
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		Если ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(400, "Потрібно пройти авторизацію");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Регионы.Код,
		|	Регионы.Наименование
		|ИЗ
		|	Справочник.Регионы КАК Регионы";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ХМЛДани = "
		|<regions>";
		
		Пока Выборка.Следующий() Цикл
			
			ХМЛДани = ХМЛДани + "
			|	<region>
			|		<code>" + Выборка.Код + "</code>
			|		<name><![CDATA[" + Выборка.Наименование + "]]></name>
			|	</region>";			
			
		КонецЦикла;
		
		ХМЛДани = ХМЛДани + "
		|</regions>";
		
		Возврат ХМЛОтвет(200, "OK", Ключ, ВебПользовательСсилка, ХМЛДани);
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

// ХМЛ список населених пунктів вибраного регіону (асинхронна підгрузка)
//
Функция GetSettlements_Async(Ключ, ІПАдреса, РегионВладелецКод) Экспорт
	
	Попытка
		
		ВебПользовательСсилка = ПолучитьПользователяПоКлючу(Ключ, ІПАдреса);
		
		Если ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка() Тогда
			Возврат ХМЛОтвет(400, "Потрібно пройти авторизацію");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НаселенныеПункты.Код,
		|	НаселенныеПункты.Наименование
		|ИЗ
		|	Справочник.НаселенныеПункты КАК НаселенныеПункты
		|ГДЕ
		|	НаселенныеПункты.Владелец.Код = &РегионВладелецКод";
		
		Запрос.УстановитьПараметр("РегионВладелецКод", РегионВладелецКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ХМЛДани = "
		|<settlements>";
		
		Пока Выборка.Следующий() Цикл
			
			ХМЛДани = ХМЛДани + "
			|	<settlement>
			|		<code>" + Выборка.Код + "</code>
			|		<name><![CDATA[" + Выборка.Наименование + "]]></name>
			|	</settlement>";			
			
		КонецЦикла;
		
		ХМЛДани = ХМЛДани + "
		|</settlements>";
		
		Возврат ХМЛОтвет(200, "OK", "", Null, ХМЛДани);
	Исключение
		Возврат ХМЛОтвет(500, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРИВАТНІ ФУНКЦІЇ
//

// Функція формує ХМЛ пакет
//		КодСостояния - довільне число яке вказує на стан виконання (наприклад 200 це ОК, 500 - помилка і т.д)
// 		ОписаниеСостояния - коментар стану
//		Ключ - унікальний ключ сесії якщо є
// 		ТелоХМЛ - додаткові дані які потрібно вставити в хмл
Функция ХМЛОтвет(КодСостояния, ОписаниеСостояния = "", Ключ = "", ВебПользовательСсилка = Null, ТелоХМЛ = "")
	
	ХМЛДани = "<?xml version=""1.0"" encoding=""windows-1251""?>
	|<root>
	|	<state code=""" + КодСостояния + """ guid=""" + Ключ + """>
	|		<info><![CDATA[" + ОписаниеСостояния + "]]></info>";
	
	Если НЕ (ВебПользовательСсилка = Null ИЛИ ВебПользовательСсилка = Справочники.ВебПользователи.ПустаяСсылка()) Тогда
		
		ВебПользователь = ВебПользовательСсилка.ПолучитьОбъект();
		
		ХМЛДани = ХМЛДани + "
		|		<user>
		|			<code>" + ВебПользователь.Код + "</code>
		|			<name>" + ВебПользователь.Наименование + "</name>
		|		</user>";
		
	КонецЕсли;
	
	ХМЛДани = ХМЛДани + "
	|	</state>
	|" + ТелоХМЛ + "	
	|</root>";
	
	Возврат ХМЛДани;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕССІЇ
//

// Запис сессії користувача
//	  Ключ - унікальний ключ сесії
//	  ВебПользователь - ссилка на елемент довідника
//	  ІПАдреса - привязка ключа до ІП
Функция ЗарегестрироватьСессиюПользователя(Ключ, ВебПользователь, ІПАдреса)
	
	НовыйНаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НовыйНаборЗаписей.Отбор.Пользователь.Установить(ВебПользователь, Истина);
	
	НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
	НоваяЗаписьНабора.Ключ = Ключ;
	НоваяЗаписьНабора.Пользователь = ВебПользователь;
	НоваяЗаписьНабора.ПоследняяАктивность = ТекущаяДата();
	НоваяЗаписьНабора.ІПАдресаКлюча = ІПАдреса;
	НовыйНаборЗаписей.Записать();
	
КонецФункции

// Повертає ссилку на користувача по ключу. 
// Важливий момент це ІР користувача. Наприклад користувач авторизувався на сайті, отримав ключ сесії
// і всі наступні дії відбуваються з використанням даного ключа. Для додаткового захисту відбувається 
// перевірка ІР адреси, щоб не було перехоплення ключа.
//		Ключ - унікальний ключ сесії
//		ІПАдреса - привязка ключа до ІП		
Функция ПолучитьПользователяПоКлючу(Ключ, ІПАдреса)
	
	//Службова перевірка всіх сесій і видалення устарівших
	ПроверитьСостояниеСесий();
	
	//Пошук користувача
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НаборЗаписей.Отбор.ІПАдресаКлюча.Установить(ІПАдреса, Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		
		//Обновлення останньої активності сесії користувача
		Запись.ПоследняяАктивность = ТекущаяДата();
		НаборЗаписей.Записать();
		
		Возврат Запись.Пользователь;
	Иначе
		Возврат Справочники.ВебПользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функція перевіряє актуальність всіх сесій
// Сесії в яких остання активність менша часу життя сесії - видаляються
Функция ПроверитьСостояниеСесий()
	
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); 
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		
		Если (ТекущаяДата() - ВРЕМЯ_ЖИЗНИ_СЕССИИ) > Запись.ПоследняяАктивность Тогда
			НаборЗаписей.Удалить(Запись); 
		КонецЕсли;
		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецФункции	

// Функція обновляє останню активність сесії
// 		Ключ - ключ користувача
// 		ІПАдреса - привязка ключа до ІП	
Функция ОбновитьСесиюПользователя(Ключ, ІПАдреса)
	
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НаборЗаписей.Отбор.ІПАдресаКлюча.Установить(ІПАдреса, Истина);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		Запись.ПоследняяАктивность = ТекущаяДата();		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецФункции

// Функція видаляє сесію користувача
//      Ключ - ключ користувача
// 		ІПАдреса - привязка ключа до ІП	
Функция ЗакритиСесиюПользователя(Ключ, ІПАдреса)
	
	НаборЗаписей = РегистрыСведений.ВебСесииПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(Ключ, Истина);
	НаборЗаписей.Отбор.ІПАдресаКлюча.Установить(ІПАдреса, Истина);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		НаборЗаписей.Удалить(Запись); 		
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецФункции

//-------------------------------------------

ВРЕМЯ_ЖИЗНИ_СЕССИИ = 3600; //Сек
